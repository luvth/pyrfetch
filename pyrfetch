#!/usr/bin/env python3

import platform
import socket
import psutil
import subprocess
import time
import argparse
import json

ascii_art = [
    "      /\\           ",
    "     /  \\          ",
    "    /    \\         ",
    "   /      \\        ",
    "  /   ,,   \\       ",
    " /   |  |   \\      ",
    r"/_-''    ''-_\     ",
    "                   ",
]

def getOsName(): # Get the OS name from /etc/os-release instead of platform.system()
    with open("/etc/os-release", "r") as file:
        for line in file:
            if "PRETTY_NAME" in line:
                return line.split("=")[1].strip().replace('"', '')
    return platform.system() # Fallback


def format_uptime(seconds): # Format uptime with a custom string
    days, seconds = divmod(seconds, 86400)
    hours, seconds = divmod(seconds, 3600)
    minutes, seconds = divmod(seconds, 60)
    return f"{days}d {hours}h {minutes}m {seconds}s" if days else f"{hours}h {minutes}m {seconds}s"

def get_gpus_info():
    try:
        gpu = ["N/A"]
        result = subprocess.run(["lspci"], stdout=subprocess.PIPE, text=True) # Use lspci intead of nvidia-smi for better compatibility with other GPUs
        for line in result.stdout.splitlines():
            if "VGA compatible controller" in line or "3D controller" in line:
                gpu.append(line.split(":")[2].strip())
        show_gpu = True
    except subprocess.CalledProcessError:
        show_gpu = False
    return (show_gpu, gpu)


def get_system_info(show_percentage, include_disk, include_temp, export_file):
    os_name = getOsName()
    kernel = platform.release()
    hostname = socket.gethostname()
    boot_time = psutil.boot_time()
    uptime_seconds = int(time.time() - boot_time)
    uptime_str = format_uptime(uptime_seconds)
    
    cpu_name = "Unknown" 
    with open("/proc/cpuinfo", "r") as f:
        for line in f:
            if "model name" in line:
                cpu_name = line.split(":")[1].strip()
                break

    show_gpu, gpu = get_gpus_info()

    ram = psutil.virtual_memory()
    if show_percentage:
        ram_info = f"{ram.percent}%"
    else:
        ram_info = f"{ram.used / (1024 ** 3):.2f}/{ram.total / (1024 ** 3):.2f} Go"
    
    disk_info = "N/A"
    if include_disk:
        disk = psutil.disk_usage('/')
        disk_info = f"{disk.used / (1024 ** 3):.2f}/{disk.total / (1024 ** 3):.2f} Go ({disk.percent}%)"

    temperature = "N/A"
    if include_temp:
        try:
            temp = psutil.sensors_temperatures()
            if 'coretemp' in temp:
                temperature = f"{temp['coretemp'][0].current}°C"
            else:
                temperature = "N/A"
        except AttributeError:
            temperature = "Unsupported on this system."

    info = [
        f"OS: {os_name}",
        f"Kernel: {kernel}",
        f"Hostname: {hostname}",
        f"Uptime: {uptime_str}",
        f"RAM: {ram_info}",
        f"CPU: {cpu_name}",
        f"Disk: {disk_info if include_disk else 'N/A'}",
        f"Temp: {temperature}",
        "", ""
    ]
    
    if show_gpu:
        if len(gpu) > 1:
            for i, g in enumerate(gpu[1:]):
                info.insert(6+i, f"GPU: {g}")
        else:
            info.insert(6, f"GPU: {gpu[0]}")

    print("")
    for i in range(len(ascii_art)):
        if i < len(info):
            print(f"{ascii_art[i]}{info[i]}")
        else:
            print(ascii_art[i])
    print("")

    if export_file:
        data = {
            "OS": os_name,
            "Kernel": kernel,
            "Hostname": hostname,
            "Uptime": uptime_str,
            "CPU": cpu_name,
            "RAM": ram_info,
            "GPU": gpu,
            "Disk": disk_info if include_disk else "N/A",
            "Temp": temperature
        }
        with open(export_file, 'w') as f:
            json.dump(data, f, indent=4)
        print(f"\nInformations exportées vers {export_file}")

def parse_args():
    parser = argparse.ArgumentParser(description="Affiche des informations système.")
    parser.add_argument("--pourcentage", action="store_true", help="Afficher l'utilisation de la RAM en pourcentage.")
    parser.add_argument("--disk", action="store_true", help="Inclure les informations sur l'espace disque.")
    parser.add_argument("--temp", action="store_true", help="Inclure la température des composants (si disponible).")
    parser.add_argument("--export", type=str, help="Exporter les informations dans un fichier JSON.")
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    get_system_info(args.pourcentage, args.disk, args.temp, args.export)
