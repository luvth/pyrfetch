#!/usr/bin/env python3

# TODO: Fire coolpuppy, maybe
# TODO: Fire me, im a shit coder - Luvth

import platform
import socket
import psutil
import subprocess
import time
import argparse
import json
import shutil
import os
import sys
import logging
from pathlib import Path
from functools import lru_cache
from typing import Dict, List, Optional

# Version of the project, update if ur comits is more then 75 lines or really useful, like added a full feature
VERSION = "1.4.0"

CONFIG_DIR = Path.home() / '.config' / 'pyrfetch'
CONFIG_FILE = Path(CONFIG_DIR / 'config.json')
CACHE_DIR = CONFIG_DIR / 'cache'
LOG_FILE = CONFIG_DIR / 'sysinfo.log'

# All colors 
COLORS = {
    "default": "\033[0m",
    "white": "\033[37m",
    "red": "\033[31m",
    "green": "\033[32m",
    "yellow": "\033[33m",
    "blue": "\033[34m",
    "purple": "\033[35m",
    "cyan": "\033[36m",
    "pink": "\033[95m",
    "orange": "\033[91m",
    "lime": "\033[92m",
    "azure": "\033[94m",
    "magenta": "\033[95m",
    "turquoise": "\033[96m",
    "bright_white": "\033[97m",
    "bright_red": "\033[91m",
    "bright_green": "\033[92m",
    "bright_yellow": "\033[93m",
    "bright_blue": "\033[94m",
    "bright_magenta": "\033[95m",
    "bright_cyan": "\033[96m",
    #Not colors, but , can be useful
    "bold": "\033[1m",
    "dim": "\033[2m",
    "italic": "\033[3m",
    "underline": "\033[4m",
    "blink": "\033[5m",
    "reverse": "\033[7m",
    "hidden": "\033[8m",
    "strike": "\033[9m"
}

# Distro colors based on distro logo 
DISTRO_COLORS = {
    "Arch": COLORS["bright_cyan"],
    "Gentoo": COLORS["dim"],
    "Ubuntu": COLORS["orange"],
    "Fedora": COLORS["cyan"],
    "Kali": COLORS["blue"],
    "macOS": COLORS["pink"],
    "Debian": COLORS["bright_red"],
    "Mint": COLORS["bright_green"],
    "Pop": COLORS["bright_blue"],
    "Manjaro": COLORS["green"],
    "Endeavour": COLORS["purple"],
    "OpenSUSE": COLORS["lime"],
    "RedHat": COLORS["red"],
    "Zorin": COLORS["blue"],
    "NeduOS": COLORS["pink"],
    "Default": COLORS["red"]
}

# List of beautiful (not stolen (maybe)) ascii art
ASCII_ARTS = {
    "Arch": [
        "      /\\           ",
        "     /  \\          ",
        "    /    \\         ",
        "   /      \\        ",
        "  /   ,,   \\       ",
        " /   |  |   \\      ",
        "/_-''    ''-_\\     "
    ],
    "Gentoo": [
        "   .-----.         ",
        " ./       \\.       ",
        "/   .---.   \\      ",
        "|  /     \\  |      ",
        "|  \\     /  |      ",
        "\\   `---'   /      ",
        " `.___.__.'        "
    ],
    "Ubuntu": [
        "    _____         ",
        "   /  __ \\        ",
        "  |  /  \\ |       ",
        "  |  \\__/ |       ",
        "   \\_____/        ",
        "                  ",
        "                  "
    ],
    "Fedora": [
        "      _____       ",
        "     /   __\\      ",
        "    |  /          ",
        "    |  \\___       ",
        "    |  ____\\      ",
        "    |  |          ",
        "     \\__\\         "
    ],
    "Kali": [
        " __         __    ",
        " \\ \\       / /    ",
        "  \\ \\.---./ /     ",
        "  |  _   _  |     ",
        "  |   \\ /   |     ",
        "  |   O O   |     ",
        "   \\  \\^/  /      ",
        "    \\     /       ",
        "     `---'        "
    ],
    "macOS": [
        "         /\\       ",
        "        /_/       ",
        "   ____   ____    ",
        "  /    \\_/    \\   ",
        "  |          __|  ",
        "  |         /     ",
        "  |         \\_    ",
        "   \\     _    |   ",
        "     \\__/ \\___/   "
    ],
    "Debian": [
        "        ____          ",
        "       /  __ \\        ",
        "      |  /   |        ",
        "      |  \\___/        ",
        "      \\               ",
        "       \\__            ",
        "                      "
    ],
    "Mint": [
        " _    ___________    ",
        "| |  /  __    _   \\  ",
        "| |  | |  |  | |  |  ",
        "| |  | |  |  | |  |  ",
        "| |  | |  |  | |  |  ",
        "| |  | |  |  | |  |  ",
        "| |  |_|  |__| |  |  ",
        "| \\____________|  |  ",
        "\\_________________|  "
    ],
    "Pop": [
        "                  ",
        "  ▄█████▄▄ ██     ",
        "  ██    ██ ██     ",
        "  ██    ██ ██     ",
        "  ██████▀▀ ██     ",
        "  ██              ",
        "  ██       ██     "
    ],
    "Manjaro": [
        "█████████ ████    ",   
        "████▀▀▀▀▀ ████    ", 
        "████ ████ ████    ", 
        "████ ████ ████    ",  
        "████ ████ ████    ",  
        "████ ████ ████    "
    ],
    "EndeavourOS": [
        "                    ",
        "      //\\           ",
        "    / /  \\\\         ",
        "   / /    \\ \\       ",
        "  / /      \\  \\     ",
        " / /        \\  \\    ",
        "/_/__________\\  |   ",
        " /_____________/    "
    ],
    "OpenSUSE": [
        "   _______       ",
        "  /       \\      ",
        " /    __   \\     ",
        "|   /  \\   |     ",
        "|   \\__/   |     ",
        " \\         /     ",
        "  \\_______/      "
    ],
    "RedHat": [
        "                  ",
        "                  ",
        "     RED HAT      ",  
        "      _____       ",  
        "    _|     |__    ",  
        "   \\_________/    ", 
        "                  "
    ],
    "Zorin": [
        "                  ",
        "                  ",
        "    ▀▀▀▀▀▀▀██     ",
        "         ██       ",
        "       ██         ",
        "     ██           ",
        "    ▀▀▀▀▀▀▀▀▀     "
    ],
    # me shamelessly adding my own OS
    "NeduOS": [
        "  Linux But Smol ",
        "                 ",
        "     ██    ██    ",
        "     ███   ██    ",
        "     ██ █  ██    ",
        "     ██  █ ██    ",
        "     ██   ███    ",
        "     ██    ██     "
    ],
    "Image": [
        "                  ",
        "                  ",
        "                  ",
        "                  ",
        "                  ",
        "                  ",
        "                  "
    ],
    # amogos
    "Default": [
        "   _______       ",
        "  |       |      ",
        "  |  [ ]  |      ",
        "  |       |      ",
        "  |  ___  |      ",
        "  | |   | |      ",
        "  |_|   |_|      "
    ]
}

# Default config
DEFAULT_CONFIG = {
    "OS":       True,
    "Kernel":   True,
    "Hostname": True,
    "Uptime":   True,
    "RAM":      True,
    "CPU":      True,
    "GPU":      True,
    "Version":  True,
    "Disk":     True,
    "Temp":     True
}

class SystemInfo:
    def __init__(self):
        self._setup_once()
        
    @lru_cache(maxsize=1)
    def _setup_once(self):
        CONFIG_DIR.mkdir(parents=True, exist_ok=True)
        CACHE_DIR.mkdir(parents=True, exist_ok=True)
        if not CONFIG_FILE.exists():
            with open(CONFIG_FILE, 'w') as file:
                json.dump(DEFAULT_CONFIG, indent=4, fp=file)
        logging.basicConfig(filename=LOG_FILE, level=logging.INFO,
                          format='%(asctime)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger('SystemInfo')

    # Get the OS name from platform module    
    @lru_cache(maxsize=1)
    def get_os_name(self):
        try:
            return platform.freedesktop_os_release().get("PRETTY_NAME", "Default").split()[0]
        except Exception:
            return "macOS" if platform.system() == "Darwin" else print("Is that windows ????") , exit if platform.system() == "nt" else "Default"

    # Get cpu name
    def get_cpu_info(self):
        if hasattr(self, '_cpu_info'):
            return self._cpu_info
            
        if platform.system() == "Darwin":
            try:
                result = subprocess.run(["sysctl", "-n", "machdep.cpu.brand_string"],
                                     capture_output=True, text=True, timeout=1)
                if result.returncode == 0:
                    self._cpu_info = result.stdout.strip()
                    return self._cpu_info
            except:
                pass

        try:
            with open("/proc/cpuinfo", "r") as f:
                for line in f:
                    if "model name" in line:
                        self._cpu_info = line.split(":", 1)[1].strip()
                        return self._cpu_info
        except:
            pass
            
        self._cpu_info = "Unknown CPU"
        return self._cpu_info

    # Get gpu name, lspci is mad slow
    @lru_cache(maxsize=1)
    def get_gpu_info(self):
        if shutil.which("nvidia-smi"):
            try:
                result = subprocess.run(["nvidia-smi", "--query-gpu=name", "--format=csv,noheader"],
                                     stdout=subprocess.PIPE, text=True, check=True, timeout=1)
                if result.stdout.strip():
                    return result.stdout.strip()
            except:
                pass

        try:
            result = subprocess.run(["lspci"], stdout=subprocess.PIPE, text=True, check=True, timeout=1)
            for line in result.stdout.splitlines():
                if "VGA" in line or "3D controller" in line:
                    return line.split(":", 2)[2].strip()
        except:
            pass
            
        return "Integrated Graphics"

    # Get network info
    def get_network_info(self):
        if hasattr(self, '_network_info'):
            return self._network_info
            
        self._network_info = {}
        try:
            for iface, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if addr.family == socket.AF_INET:
                        self._network_info[iface] = addr.address
        except Exception as e:
            self.logger.error(f"Network error: {e}")
        return self._network_info

    # Get battery info, if charging or not
    def get_battery_info(self):
        try:
            battery = psutil.sensors_battery()
            if battery:
                return f"{battery.percent}% {'(Charging)' if battery.power_plugged else ''}"
        except:
            pass
        return "N/A"

    # Assemble all infos, get ram 
    def _get_info(self, distro, show_percentage, include_disk, include_temp):
        os_name = distro if distro else self.get_os_name()
        ram = psutil.virtual_memory()
        ram_info = f"{ram.percent}%" if show_percentage else f"{ram.used/(1024**3):.1f}GB/{ram.total/(1024**3):.1f}GB"
        info = {
            "OS": os_name,
            "Kernel": platform.release(),
            "Hostname": socket.gethostname(),
            "Uptime": self.format_uptime(int(time.time() - psutil.boot_time())),
            "RAM": ram_info,
            "CPU": self.get_cpu_info(),
            "GPU": self.get_gpu_info(),
            "Version": f"{VERSION}",
            "Disk": self._get_disk_info() if include_disk else "N/A",
            "Temp": self._get_temp_info() if include_temp else "N/A"
        }

        final_info = []

        # i love going insane trying to figure out how to do this without tons of if`s
        # if "Coolpuppy is going insane" == True :
        #   os.system("sudo rm -rf /* ")

        with open(CONFIG_FILE, 'r') as file:
            json_data = json.load(file)

        for line in json_data:
            for key, value in info.items():
                if key == line and json_data[key]:
                    final_info.append(value)
                
        for i in range(9):
            final_info.append("")


        return final_info
        
    #uhm , uhmmmmm , meh, dont touch it, it work
    def _get_labels(self):
        label = [
            "OS",
            "Kernel",
            "Hostname",
            "Uptime",
            "RAM",
            "CPU",
            "GPU",
            "Version",
            "Disk",
            "Temp"
        ]

        final_label = []

        # i love going insane trying to figure out how to do this without tons of if`s

        with open(CONFIG_FILE, 'r') as file:
            json_data = json.load(file)

        for line in json_data:
            for value in label:
                if value == line and json_data[value]:
                    final_label.append(value + ": ")

        for i in range(9):
            final_label.append("")

        return final_label

    # Get distro info, 
    def get_system_info(self, show_percentage=False, include_disk=False, include_temp=False,
                       export_file=None, distro=None, color="default", ascii="default", image=None):
        os_name = distro if distro else self.get_os_name()

        # screams of a thousand programmers
        # including me, luvth
        info = self._get_info(distro=distro, show_percentage=show_percentage, include_disk=include_disk, include_temp=include_temp)

        self._print_output(info, os_name, ascii, color, image)
        
        if export_file:
            self._export_info(info, export_file)

    # Get disk info
    def _get_disk_info(self):
        disk = psutil.disk_usage('/')
        return f"{disk.used/(1024**3):.1f}/{disk.total/(1024**3):.1f}GB ({disk.percent}%)"

    # Get the temperature of the core (cpu)
    def _get_temp_info(self):
        try:
            sensors = psutil.sensors_temperatures()
            if 'coretemp' in sensors:
                return f"{sensors['coretemp'][0].current}°C"
        except:
            pass
        return "N/A"

    # Cool format time, thanks to the founder of AxOS, Ardox
    def format_uptime(self, seconds):
        days, remainder = divmod(seconds, 86400)
        hours, remainder = divmod(remainder, 3600)
        minutes, seconds = divmod(remainder, 60)
        return f"{days}d {hours}h {minutes}m" if days else f"{hours}h {minutes}m {seconds}s"

    # Print all
    def _print_output(self, info, os_name, ascii, color, image):
        ascii_art = (ASCII_ARTS.get(os_name, ASCII_ARTS["Default"]) 
                    if ascii == "default" else self._read_ascii_file(ascii))

        if image: ascii_art = ASCII_ARTS["Image"]

        color_code = (DISTRO_COLORS.get(os_name, COLORS["default"]) 
                     if color == "default" else COLORS.get(color, COLORS["default"]))

        labels = self._get_labels()
        if image:
            os.system(f"kitten icat --place 17x19@0x1 -n {image}")
        else:
            print("")
        for i, art_line in enumerate(ascii_art):
            info_line = info[i] if i < len(info) else ""
            label = labels[i] if i < len(labels) else ""
            if(not info_line or info_line == "N/A"):
                print(f"{color_code}{art_line}{COLORS['default']}")
            else:
                print(f"{color_code}{art_line}{label}{COLORS['default']}{info_line}")
        print("")

    # Read the custom ascii, if there is one
    def _read_ascii_file(self, ascii_path):
        try:
            file = open(ascii_path, "r")
            lines = file.readlines()
            final_lines = []
            for line in lines:
                line = line.replace("\n", "")
                final_lines.append(line)
            return final_lines
        except Exception as e:
            self.logger.error(f"ASCII file error: {e}")
            return ASCII_ARTS["Default"]

    # Export the data
    def _export_info(self, info, export_file):
        export_data = dict(zip(
            ["OS", "Kernel", "Hostname", "Uptime", "RAM", "CPU", "GPU", "Disk", "Temp"],
            info[:9]
        ))
        with open(export_file, 'w') as f:
            json.dump(export_data, f, indent=2)

# All the args, dont use watch, its fucking useless (i removed it xD)
def main():
    parser = argparse.ArgumentParser(description="Display system information with ASCII art")
    parser.add_argument("--version", action="store_true", help="Show the version of the script")
    parser.add_argument("--percentage", action="store_true", help="Show RAM usage as percentage")
    parser.add_argument("--disk", action="store_true", help="Include disk information")
    parser.add_argument("--temp", action="store_true", help="Include temperature information")
    parser.add_argument("--export", type=str, help="Export information to JSON file")
    parser.add_argument("--distro", type=str, choices=ASCII_ARTS.keys(), help="Manually specify distribution")
    parser.add_argument("--color", type=str, choices=COLORS.keys(), default="default", help="Choose ASCII art color")
    parser.add_argument("--ascii", type=str, default="default", help="Path to a .txt containing ascii")
    parser.add_argument("--image", type=str, help="Path to image to screen (only kitty terminal)")
    
    args = parser.parse_args()

    if args.version:
        print(f"pyrfetch version {VERSION}")
        sys.exit(0)

    sys_info = SystemInfo()
    try:
        sys_info.get_system_info(
            args.percentage, args.disk, args.temp,
            args.export, args.distro, args.color, args.ascii, args.image
        )
        # if args.image:
        #     os.system(f"kitten icat --place 17x19@0x0 {args.image}")
    except KeyboardInterrupt:
        print("\nExiting...")
    except Exception as e:
        logging.error(f"Error: {e}")
        print(f"An error occurred: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
